# ================== LOW-CREDIT PANEL (Drop-in, Single-file) ==================
# ‡∏ß‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÑ‡∏ü‡∏•‡πå app.py / ‡∏´‡∏ô‡πâ‡∏≤ Overview ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢

from __future__ import annotations
import re
from typing import Optional, Tuple, List

import pandas as pd
import streamlit as st


# -------------------- CONFIG --------------------
LOW_CREDIT_THRESHOLD = 500  # ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
SECTION_TITLE = "Advertising credits are low"
LEFT_LABEL  = "‡∏ä‡πà‡∏≠‡∏á"
MID1_LABEL  = "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏´‡∏•‡∏∑‡∏≠"
MID2_LABEL  = "‡πÅ‡∏Ñ‡∏°‡∏õ‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î"
RIGHT_LABEL = "‡∏ä‡πà‡∏≠‡∏á"
# ------------------------------------------------


def _find_channel_col(df: pd.DataFrame) -> str:
    """‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤ column ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á: 'channel' ‡∏´‡∏£‡∏∑‡∏≠ 'c_name' ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å"""
    candidates = [c for c in df.columns if str(c).strip().lower() in ("channel", "c_name")]
    if candidates:
        return candidates[0]
    return df.columns[0]


def _looks_like_ads_blob(series: pd.Series) -> bool:
    """‡πÄ‡∏î‡∏≤‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î (‡∏°‡∏µ 'gmv:' ‡πÅ‡∏•‡∏∞ 'auto:')"""
    cnt = 0
    for v in series.astype(str).head(50):
        s = v.replace(" ", "")
        if "gmv:" in s and "auto:" in s:
            cnt += 1
    return cnt >= max(1, len(series) // 50)  # ‡∏°‡∏µ‡∏ö‡πâ‡∏≤‡∏á‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πà


def _find_ads_blob_col(df: pd.DataFrame) -> Optional[str]:
    for c in df.columns:
        s = df[c]
        if s.dtype == "object" and _looks_like_ads_blob(s):
            return c
    return None


def _looks_like_snapshot(series: pd.Series) -> bool:
    """
    ‡πÄ‡∏î‡∏≤‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå snapshot:
    - ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ comma ‡πÄ‡∏ä‡πà‡∏ô '2025,12,34,776,22,51,1036'
    - ‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
    """
    ok, tried = 0, 0
    for v in series.astype(str).head(50):
        tried += 1
        parts = [p for p in v.split(",") if p.strip() != ""]
        if len(parts) >= 2 and re.fullmatch(r"[0-9]+", parts[-1]) is not None:
            ok += 1
    return ok >= max(1, tried // 3)


def _find_snapshot_col(df: pd.DataFrame) -> Optional[str]:
    candidates = []
    for c in df.columns:
        if df[c].dtype == "object" and _looks_like_snapshot(df[c]):
            candidates.append(c)
    if not candidates:
        return None
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà *‡∏Ç‡∏ß‡∏≤‡∏™‡∏∏‡∏î* (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    rightmost = None
    right_idx = -1
    for c in candidates:
        idx = list(df.columns).index(c)
        if idx > right_idx:
            right_idx, rightmost = idx, c
    return rightmost


def _safe_int(x) -> Optional[int]:
    """‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    try:
        return int(str(x).strip())
    except Exception:
        return None


def _extract_credit_from_snapshot(val: str) -> Optional[int]:
    """
    value snapshot -> ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
    '2025,12,34,776,22,51,1036' -> 1036
    """
    if pd.isna(val):
        return None
    parts = [p for p in str(val).split(",") if p.strip() != ""]
    if not parts:
        return None
    return _safe_int(parts[-1])


def _extract_active_campaigns_from_ads_blob(val: str) -> int:
    """
    ‡∏Å‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î -> ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Ñ‡∏°‡∏õ‡πå‡∏ó‡∏µ‡πà '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
    ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤: ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏°‡∏õ‡πå (‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡πâ‡∏≤‡∏¢) ‡πÄ‡∏£‡∏≤‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ '‡πÄ‡∏õ‡∏¥‡∏î' ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏≠‡∏î‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ (field ‡∏ó‡∏µ‡πà 2) > 0
    ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ['ro _30', 1250, 34, 4, 95, 720, 20.89] -> 34 ‡∏Ñ‡∏∑‡∏≠ '‡∏Å‡∏¥‡∏ô‡πÄ‡∏á‡∏¥‡∏ô' > 0 ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î
    """
    if pd.isna(val):
        return 0
    s = str(val)

    # ‡∏ï‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥ 'gmv:...' 'auto:...' ‡∏≠‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    parts = s.split("]]")
    tail = s
    if len(parts) >= 2:
        tail = parts[-1]

    # ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° ‡πÄ‡∏ä‡πà‡∏ô [ 'ro', 1250, 34, ... ]
    bracket_groups = re.findall(r"\[(.*?)\]", tail)
    cnt = 0
    for g in bracket_groups:
        # split comma ‡πÅ‡∏ï‡πà‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ quote
        toks = [t.strip(" '\"") for t in g.split(",")]
        # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ä‡πà‡∏≠‡∏á: name, budget, spend
        if len(toks) >= 3:
            spend = _safe_int(toks[2])
            if spend is not None and spend > 0:
                cnt += 1
    return cnt


def _build_low_credit_table(df_latest: pd.DataFrame) -> Optional[pd.DataFrame]:
    """
    ‡∏¢‡πà‡∏≠‡∏¢ df_latest ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà:
    - ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ < LOW_CREDIT_THRESHOLD
    - ‡∏°‡∏µ‡πÅ‡∏Ñ‡∏°‡∏õ‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô > 0
    ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: DataFrame 4 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏ã‡πâ‡∏≤‡∏¢-‡∏Å‡∏•‡∏≤‡∏á-‡∏Ç‡∏ß‡∏≤) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÇ‡∏ä‡∏ß‡πå 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå/‡πÅ‡∏ñ‡∏ß
    """
    if df_latest is None or df_latest.empty:
        return None

    chan_col = _find_channel_col(df_latest)
    ads_col  = _find_ads_blob_col(df_latest)
    snap_col = _find_snapshot_col(df_latest)

    if ads_col is None or snap_col is None:
        return None

    work = df_latest[[chan_col, ads_col, snap_col]].copy()
    work.rename(columns={chan_col: "channel", ads_col: "ads_blob", snap_col: "snapshot"}, inplace=True)

    work["credit_left"] = work["snapshot"].apply(_extract_credit_from_snapshot)
    work["active_camps"] = work["ads_blob"].apply(_extract_active_campaigns_from_ads_blob)

    filt = (work["credit_left"].notna()) & (work["credit_left"] < LOW_CREDIT_THRESHOLD) & (work["active_camps"] > 0)
    work = work.loc[filt, ["channel", "credit_left", "active_camps"]].copy()

    if work.empty:
        return None

    work.sort_values(["credit_left", "channel"], inplace=True, ignore_index=True)

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏ã‡πâ‡∏≤‡∏¢/‡∏Ç‡∏ß‡∏≤) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏ä‡∏ß‡πå‡∏™‡∏ß‡∏¢ ‡πÜ
    rows = []
    vals = work.to_dict("records")
    for i in range(0, len(vals), 2):
        left  = vals[i]
        right = vals[i+1] if i+1 < len(vals) else None
        rows.append({
            LEFT_LABEL:  left["channel"],
            MID1_LABEL:  left["credit_left"],
            MID2_LABEL:  f'{left["active_camps"]} ‡πÅ‡∏Ñ‡∏°',
            RIGHT_LABEL: right["channel"] if right else ""
        })
    return pd.DataFrame(rows)


def render_low_credit_panel(df_latest: pd.DataFrame) -> None:
    """
    ‡∏ß‡∏≤‡∏á call ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏ì ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏™‡∏î‡∏á Data (hourly latest snapshot per channel)
    """
    st.markdown(f"### {SECTION_TITLE}")

    tbl = _build_low_credit_table(df_latest)
    if tbl is None or tbl.empty:
        st.info("üôå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ")
        return

    # ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á-‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï-‡πÅ‡∏Ñ‡∏°‡∏õ‡πå) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏°‡∏≤)
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö Markdown ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ü‡∏≠‡∏ô‡∏ï‡πå/‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    # (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏ä‡πâ st.dataframe ‡∏Å‡πá‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ)
    cols = st.columns(4)
    cols[0].markdown(f"**{LEFT_LABEL}**")
    cols[1].markdown(f"**{MID1_LABEL}**")
    cols[2].markdown(f"**{MID2_LABEL}**")
    cols[3].markdown(f"**{RIGHT_LABEL}**")

    for _, r in tbl.iterrows():
        cols = st.columns(4)
        cols[0].write(str(r[LEFT_LABEL]))
        cols[1].write(int(r[MID1_LABEL]))
        cols[2].write(str(r[MID2_LABEL]))
        cols[3].write(str(r[RIGHT_LABEL]))

    st.caption("‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï < %d ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÅ‡∏Ñ‡∏°‡∏õ‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÅ‡∏Ñ‡∏°" % LOW_CREDIT_THRESHOLD)

# ================== END LOW-CREDIT PANEL ==================
