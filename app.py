# app.py
# -*- coding: utf-8 -*-
import ast
import re
from typing import List, Tuple, Optional

import numpy as np
import pandas as pd
import streamlit as st


# =========================
# Data loading (‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°)
# =========================
@st.cache_data(show_spinner=False)
def load_data() -> pd.DataFrame:
    """
    ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡πÅ‡∏ô‡∏õ‡∏ä‡πá‡∏≠‡∏ï per channel '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
    ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô DataFrame ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:
        - 'channel' ‡∏´‡∏£‡∏∑‡∏≠ 'C_name' (‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á)
        - 1 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ù‡∏±‡πà‡∏á '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î‡∏£‡∏≤‡∏¢‡πÅ‡∏Ñ‡∏°‡∏õ‡πå' (‡∏°‡∏µ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ 'gmv:' / 'auto:' ‡πÅ‡∏•‡∏∞‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç)
        - 1 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ù‡∏±‡πà‡∏á '‡∏™‡πÅ‡∏ô‡∏õ‡∏ä‡πá‡∏≠‡∏ï‡∏£‡∏ß‡∏°' (‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏±‡πà‡∏ô , ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï)
    ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏°‡∏µ auto-detect ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡πá‡∏¢‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
    """
    # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (Google Sheet/DB/CSV)
    # ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÉ‡∏™‡πà dummy ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    data = [
        {
            "channel": "aaa",
            "ads_blob": "('gmv:u0s2.0', 'auto:u0s1.0', [['ro_30', 1250, 34, 4, 95, 720, 20.89], ['ro_99', 900, 0, 0, 0, 0, 0.0]])",
            "snapshot": "2025,12,34,776,22,51,400"
        },
        {
            "channel": "bbb",
            "ads_blob": "('gmv:u0s2.0', 'auto:u0s2.0', [['camp_a', 800, 0, 0, 0, 0, 0.0], ['camp_b', 700, 0, 0, 0, 0, 0.0]])",
            "snapshot": "2025,11,22,500,10,25,455"
        },
        {
            "channel": "ccc",
            "ads_blob": "('gmv:u0s2.0', 'auto:u0s1.0', [['c1', 1000, 25, 2, 33, 195, 25.34]])",
            "snapshot": "2025,10,22,333,11,22,444"
        },
        {
            "channel": "ddd",
            "ads_blob": "('gmv:u0s2.0', 'auto:u0s1.0', [['c1', 1000, 0, 0, 0, 0, 0.0]])",
            "snapshot": "2025,10,22,333,11,22,444"
        },
    ]
    return pd.DataFrame(data)


# =========================
# Helpers: auto-detect columns
# =========================
def find_channel_col(df: pd.DataFrame) -> str:
    cand = [c for c in df.columns if c.lower() in ("channel", "c_name", "cname")]
    if cand:
        return cand[0]
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏≤‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á
    return df.columns[0]


def find_ads_blob_col(df: pd.DataFrame) -> Optional[str]:
    """
    ‡∏´‡∏≤ column ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô ('gmv:u0s2.0', 'auto:u0s1.0', [[...]])
    """
    for col in df.columns:
        if df[col].dtype == object:
            s = str(df[col].dropna().astype(str).head(3).tolist())
            if "gmv:" in s and "auto:" in s and "[[" in s:
                return col
    return None


def find_snapshot_col(df: pd.DataFrame) -> Optional[str]:
    """
    ‡∏´‡∏≤ column snapshot ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ , ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô credit
    """
    pattern = re.compile(r"^\s*\d+(,\s*\d+){3,}\s*$")
    for col in df.columns:
        if df[col].dtype == object:
            vals = df[col].dropna().astype(str).head(5)
            ok_count = sum(bool(pattern.match(v)) for v in vals)
            if ok_count >= max(1, len(vals) // 2):
                return col
    return None


# =========================
# Parse functions
# =========================
def parse_campaign_blob(v: str) -> List[List[float]]:
    """
    ‡∏û‡∏≤‡∏£‡πå‡∏™‡∏Å‡πâ‡∏≠‡∏ô‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ù‡∏±‡πà‡∏á‡πÅ‡∏≠‡∏î
    Expected literal_eval -> (gmv_flag, auto_flag, [[name, budget, spend, orders, views, gmv, roas], ...])
    ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç (list)
    """
    try:
        tup = ast.literal_eval(v)
        if isinstance(tup, tuple) and len(tup) >= 3 and isinstance(tup[2], list):
            return tup[2]
        # ‡∏ö‡∏≤‡∏á‡πÄ‡∏Ñ‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô list ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
        if isinstance(tup, list) and len(tup) and isinstance(tup[0], list):
            return tup
    except Exception:
        pass
    return []


def count_active_campaigns(v: str) -> int:
    """
    ‡∏ô‡∏±‡∏ö‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà '‡πÄ‡∏õ‡∏¥‡∏î' ‡πÅ‡∏ö‡∏ö conservative = spend > 0
    """
    camps = parse_campaign_blob(v)
    active = 0
    for item in camps:
        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: [name, budget, spend, orders, views, gmv, roas]
        if len(item) >= 3:
            try:
                spend = float(item[2])
                if spend > 0:
                    active += 1
            except Exception:
                continue
    return active


def extract_credit_from_snapshot(s: str) -> Optional[float]:
    """
    ‡∏î‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å snapshot (‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î)
    ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: '2025,12,34,776,22,51,1036' -> 1036
    """
    if not isinstance(s, str):
        return None
    try:
        parts = [x.strip() for x in s.split(",")]
        if not parts:
            return None
        return float(parts[-1])
    except Exception:
        return None


# =========================
# UI Blocks
# =========================
def render_low_credit_panel(df_latest: pd.DataFrame):
    """
    ‡∏ß‡∏≤‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å Advertising credits are low
    - ‡∏Ñ‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï < 500 ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà > 0
    """
    channel_col = find_channel_col(df_latest)
    ads_col = find_ads_blob_col(df_latest)
    snap_col = find_snapshot_col(df_latest)

    if ads_col is None or snap_col is None:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏±‡πà‡∏á‡πÅ‡∏≠‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πÅ‡∏ô‡∏õ‡∏ä‡πá‡∏≠‡∏ï‡∏£‡∏ß‡∏° ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ï‡πà‡∏≥‡πÑ‡∏î‡πâ")
        return

    out_rows: List[Tuple[str, float, int]] = []
    for _, row in df_latest.iterrows():
        ch = str(row[channel_col])

        credit = extract_credit_from_snapshot(row.get(snap_col, ""))
        if credit is None:
            continue

        n_active = count_active_campaigns(str(row.get(ads_col, "")))

        if (credit < 500) and (n_active > 0):
            out_rows.append((ch, credit, n_active))

    if not out_rows:
        st.success("‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà üòä")
        return

    show = pd.DataFrame(out_rows, columns=["‡∏ä‡πà‡∏≠‡∏á", "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î"])
    show = show.sort_values(["‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î"], ascending=[True, False]).reset_index(drop=True)

    st.markdown("### Advertising credits are low")
    st.caption("‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 500 ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà (spend > 0)")
    st.dataframe(
        show.style.format({"‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠": lambda x: f"{int(x):,}", "‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î": "{:d}"}),
        use_container_width=True,
        hide_index=True,
    )


# =========================
# App
# =========================
st.set_page_config(page_title="Shopee ROAS Dashboard", layout="wide")

# Filters (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏° ‚Äì ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå)
with st.sidebar:
    st.header("Filters")
    st.button("Reload")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df_latest = load_data()

# KPI ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô (‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß‚Äî‡∏Ñ‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ/‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å df_latest ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á)
kpi_cols = st.columns(5)
with kpi_cols[0]:
    st.metric("Sales", f"{int(np.random.randint(150000, 250000)):,}", "+34.0%")
with kpi_cols[1]:
    st.metric("Orders", f"{int(np.random.randint(800, 1300)):,}", "+28.0%")
with kpi_cols[2]:
    st.metric("Budget (Ads)", f"{int(np.random.randint(6000, 9000)):,}", "+9.0%")
with kpi_cols[3]:
    st.metric("sale_ro (Sales/Ads)", f"{np.random.uniform(20, 35):.3f}", "+21.0%")
with kpi_cols[4]:
    st.metric("ads_ro (avg>0)", f"{np.random.uniform(15, 25):.2f}", "-12.0%")

st.markdown("## Trend overlay by day")
st.caption("*‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)*")

# -------------------------
# ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà ‚ÄúData (hourly latest snapshot per channel)‚Äù
# -------------------------
st.markdown("---")
render_low_credit_panel(df_latest)
st.markdown("---")

st.markdown("## Prime hours heatmap")
st.caption("*‡∏™‡πà‡∏ß‡∏ô Heatmap ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)*")

# ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:
# 1) ‡∏´‡∏ô‡πâ‡∏≤ Channel ‚Äì Time series table (hourly) ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏ï‡∏∞ (‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ)
# 2) ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ auto-detect ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß
# 3) ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ô‡∏¥‡∏¢‡∏≤‡∏° '‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡πÄ‡∏õ‡∏¥‡∏î' ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô logic ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô count_active_campaigns() ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
